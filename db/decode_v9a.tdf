--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=11 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_v9a
( 
	data[3..0]	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode295w[3..0]	: WIRE;
	w_anode312w[3..0]	: WIRE;
	w_anode322w[3..0]	: WIRE;
	w_anode332w[3..0]	: WIRE;
	w_anode342w[3..0]	: WIRE;
	w_anode352w[3..0]	: WIRE;
	w_anode362w[3..0]	: WIRE;
	w_anode372w[3..0]	: WIRE;
	w_anode382w[3..0]	: WIRE;
	w_anode393w[3..0]	: WIRE;
	w_anode403w[3..0]	: WIRE;
	w_anode413w[3..0]	: WIRE;
	w_anode423w[3..0]	: WIRE;
	w_anode433w[3..0]	: WIRE;
	w_anode443w[3..0]	: WIRE;
	w_anode453w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[2..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode372w[3..3], w_anode362w[3..3], w_anode352w[3..3], w_anode342w[3..3], w_anode332w[3..3], w_anode322w[3..3], w_anode312w[3..3], w_anode295w[3..3]);
	eq_wire2w[] = ( w_anode453w[3..3], w_anode443w[3..3], w_anode433w[3..3], w_anode423w[3..3], w_anode413w[3..3], w_anode403w[3..3], w_anode393w[3..3], w_anode382w[3..3]);
	w_anode295w[] = ( (w_anode295w[2..2] & (! data_wire[2..2])), (w_anode295w[1..1] & (! data_wire[1..1])), (w_anode295w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode312w[] = ( (w_anode312w[2..2] & (! data_wire[2..2])), (w_anode312w[1..1] & (! data_wire[1..1])), (w_anode312w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode322w[] = ( (w_anode322w[2..2] & (! data_wire[2..2])), (w_anode322w[1..1] & data_wire[1..1]), (w_anode322w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode332w[] = ( (w_anode332w[2..2] & (! data_wire[2..2])), (w_anode332w[1..1] & data_wire[1..1]), (w_anode332w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode342w[] = ( (w_anode342w[2..2] & data_wire[2..2]), (w_anode342w[1..1] & (! data_wire[1..1])), (w_anode342w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode352w[] = ( (w_anode352w[2..2] & data_wire[2..2]), (w_anode352w[1..1] & (! data_wire[1..1])), (w_anode352w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode362w[] = ( (w_anode362w[2..2] & data_wire[2..2]), (w_anode362w[1..1] & data_wire[1..1]), (w_anode362w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode372w[] = ( (w_anode372w[2..2] & data_wire[2..2]), (w_anode372w[1..1] & data_wire[1..1]), (w_anode372w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode382w[] = ( (w_anode382w[2..2] & (! data_wire[2..2])), (w_anode382w[1..1] & (! data_wire[1..1])), (w_anode382w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode393w[] = ( (w_anode393w[2..2] & (! data_wire[2..2])), (w_anode393w[1..1] & (! data_wire[1..1])), (w_anode393w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode403w[] = ( (w_anode403w[2..2] & (! data_wire[2..2])), (w_anode403w[1..1] & data_wire[1..1]), (w_anode403w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode413w[] = ( (w_anode413w[2..2] & (! data_wire[2..2])), (w_anode413w[1..1] & data_wire[1..1]), (w_anode413w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode423w[] = ( (w_anode423w[2..2] & data_wire[2..2]), (w_anode423w[1..1] & (! data_wire[1..1])), (w_anode423w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode433w[] = ( (w_anode433w[2..2] & data_wire[2..2]), (w_anode433w[1..1] & (! data_wire[1..1])), (w_anode433w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode443w[] = ( (w_anode443w[2..2] & data_wire[2..2]), (w_anode443w[1..1] & data_wire[1..1]), (w_anode443w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode453w[] = ( (w_anode453w[2..2] & data_wire[2..2]), (w_anode453w[1..1] & data_wire[1..1]), (w_anode453w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
